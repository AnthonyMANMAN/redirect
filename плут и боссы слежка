// ==UserScript==
// @name         Enhanced GoB Monitor Script (No Chat Clear)
// @namespace    http://tampermonkey.net/
// @version      2025-07-21-no-clear-fixed
// @description  Enhanced monitoring with date-based filtering and duplicate prevention
// @author       You
// @match        gameofbombs.com
// @icon         https://www.google.com/s2/favicons?sz=64&domain=github.com
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // ‚ö†Ô∏è CONFIGURE THESE VALUES:
    const BOT_TOKEN = '7860609958:AAGSCiD2BFAfnUO6hWY-GW-VbKjVp2nifPY';
    const CHAT_ID = '-1002599400013';

    let sentMessages = {};
    let observer = null;
    let currentServer = null;
    let isMonitoring = false;
    let serverCycleInterval = null;
    let targetServerNames = ['US', 'EU', 'RU', 'BR', 'AU', 'JP'];
    let currentTargetIndex = 0;
    let uiCreated = false;
    let minimized = false;
    let totalMessagesSent = 0; // Global counter for sent messages

    // Enhanced storage system with date tracking
    if (!window.lastSentMessagesStore) {
        window.lastSentMessagesStore = {};
    }

    // Global message storage with unique identifier per user
    const USER_ID = Math.random().toString(36).substring(2, 15); // Unique ID for this browser instance
    if (!window.globalMessageStore) {
        window.globalMessageStore = {};
    }

    function createUI() {
        if (uiCreated) return;

        const existingUI = document.getElementById('gob-monitor-ui');
        if (existingUI) existingUI.remove();

        // Unified CSS styles
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideIn {
                from { transform: translateX(-100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes pulse {
                0%, 100% { box-shadow: 0 0 15px rgba(76, 175, 80, 0.3); }
                50% { box-shadow: 0 0 25px rgba(76, 175, 80, 0.6); }
            }
            .gob-ui-glass {
                backdrop-filter: blur(10px);
                -webkit-backdrop-filter: blur(10px);
            }
            .gob-ui-button-hover:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            }
        `;
        document.head.appendChild(style);

        // Main container positioned left of other scripts
        const container = document.createElement('div');
        container.id = 'gob-monitor-ui';
        container.style.cssText = `
            position: fixed;
            top: 10px;
            right: 430px;
            width: 240px;
            background: linear-gradient(145deg, rgba(20, 20, 30, 0.95), rgba(40, 40, 60, 0.95));
            color: #ffffff;
            padding: 0;
            border-radius: 16px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            z-index: 9999;
            user-select: none;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4), 0 0 0 1px rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.1);
            animation: slideIn 0.3s ease-out;
            transition: all 0.3s ease;
        `;
        container.classList.add('gob-ui-glass');

        // Header
        const header = document.createElement('div');
        header.innerHTML = `
            <div style="display: flex; align-items: center; gap: 8px;">
                <div style="width: 12px; height: 12px; background: linear-gradient(45deg, #4CAF50, #45a049); border-radius: 50%; animation: pulse 2s infinite;"></div>
                <span style="font-weight: 600; font-size: 16px;">–ú–æ–Ω–∏—Ç–æ—Ä</span>
            </div>
        `;
        header.style.cssText = `
            background: linear-gradient(135deg, rgba(76, 175, 80, 0.2), rgba(56, 142, 60, 0.2));
            padding: 16px 20px;
            border-radius: 16px 16px 0 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            position: relative;
        `;
        container.appendChild(header);

        const contentArea = document.createElement('div');
        contentArea.id = 'gob-content-area';
        contentArea.style.cssText = `padding: 16px 20px;`;

        // Status display with user ID
        const status = document.createElement('div');
        status.style.cssText = `
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
            padding: 12px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.2s ease;
        `;

        const statusLabel = document.createElement('span');
        statusLabel.textContent = '–°—Ç–∞—Ç—É—Å:';
        statusLabel.style.cssText = `font-weight: 500; font-size: 13px; color: #E0E0E0;`;

        const statusValue = document.createElement('span');
        statusValue.id = 'gob-status-value';
        statusValue.textContent = 'üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...';
        statusValue.style.cssText = `
            font-weight: 600; font-size: 11px; color: #4CAF50;
            background: rgba(76, 175, 80, 0.2); padding: 4px 8px;
            border-radius: 6px; border: 1px solid rgba(76, 175, 80, 0.3);
            transition: all 0.2s ease; text-shadow: 0 0 8px rgba(76, 175, 80, 0.5);
            min-width: 80px; text-align: center;
        `;

        status.appendChild(statusLabel);
        status.appendChild(statusValue);
        contentArea.appendChild(status);

        // User ID display
        const userIdDiv = document.createElement('div');
        userIdDiv.style.cssText = `
            margin-bottom: 12px; padding: 8px;
            background: rgba(255, 255, 255, 0.05); border-radius: 8px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            font-size: 10px; color: #888; text-align: center;
        `;
        userIdDiv.textContent = `ID: ${USER_ID}`;
        contentArea.appendChild(userIdDiv);

        // Server selection
        const serverSection = document.createElement('div');
        serverSection.style.cssText = `
            margin-bottom: 12px; padding: 12px;
            background: rgba(255, 255, 255, 0.05); border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        `;

        const serverLabel = document.createElement('div');
        serverLabel.textContent = '–¶–µ–ª–µ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:';
        serverLabel.style.cssText = `font-weight: 500; margin-bottom: 8px; color: #E0E0E0; font-size: 13px;`;

        const serverCheckboxes = document.createElement('div');
        serverCheckboxes.style.cssText = `display: grid; grid-template-columns: repeat(3, 1fr); gap: 8px;`;

        ['US', 'EU', 'RU', 'BR', 'AU', 'JP'].forEach(server => {
            const checkboxContainer = document.createElement('label');
            checkboxContainer.style.cssText = `
                display: flex; align-items: center; cursor: pointer; padding: 6px;
                border-radius: 6px; transition: all 0.2s ease;
                background: rgba(255, 255, 255, 0.05);
                border: 1px solid rgba(255, 255, 255, 0.1);
            `;

            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.value = server;
            checkbox.checked = targetServerNames.includes(server);
            checkbox.style.cssText = `margin-right: 6px; accent-color: #4CAF50;`;
            checkbox.addEventListener('change', updateTargetServers);

            const label = document.createElement('span');
            label.textContent = server;
            label.style.cssText = `font-size: 12px; color: #E0E0E0; font-weight: 500;`;

            checkboxContainer.appendChild(checkbox);
            checkboxContainer.appendChild(label);
            serverCheckboxes.appendChild(checkboxContainer);
        });

        serverSection.appendChild(serverLabel);
        serverSection.appendChild(serverCheckboxes);
        contentArea.appendChild(serverSection);

        // Control buttons
        const buttonContainer = document.createElement('div');
        buttonContainer.style.cssText = `display: flex; flex-direction: column; gap: 8px; margin-bottom: 12px;`;

        const startButton = document.createElement('button');
        startButton.id = 'gob-start-btn';
        startButton.innerHTML = `
            <div style="display: flex; align-items: center; justify-content: center; gap: 6px;">
                <span>‚ñ∂Ô∏è</span><span>–ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</span>
            </div>
        `;
        startButton.style.cssText = `
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white; border: none; border-radius: 10px; padding: 12px 16px;
            cursor: pointer; font-weight: 600; font-size: 13px;
            transition: all 0.2s ease; box-shadow: 0 2px 8px rgba(76, 175, 80, 0.3);
        `;
        startButton.classList.add('gob-ui-button-hover');
        startButton.onclick = toggleServerCycle;

        const stopButton = document.createElement('button');
        stopButton.innerHTML = `
            <div style="display: flex; align-items: center; justify-content: center; gap: 6px;">
                <span>‚èπÔ∏è</span><span>–°—Ç–æ–ø</span>
            </div>
        `;
        stopButton.style.cssText = `
            background: linear-gradient(135deg, #ff4757, #ff3838);
            color: white; border: none; border-radius: 10px; padding: 12px 16px;
            cursor: pointer; font-weight: 600; font-size: 13px;
            transition: all 0.2s ease; box-shadow: 0 2px 8px rgba(255, 71, 87, 0.3);
        `;
        stopButton.classList.add('gob-ui-button-hover');
        stopButton.onclick = stopServerCycle;

        const checkButton = document.createElement('button');
        checkButton.innerHTML = `
            <div style="display: flex; align-items: center; justify-content: center; gap: 6px;">
                <span>üîç</span><span>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π</span>
            </div>
        `;
        checkButton.style.cssText = `
            background: linear-gradient(135deg, #4299e1, #3182ce);
            color: white; border: none; border-radius: 10px; padding: 12px 16px;
            cursor: pointer; font-weight: 600; font-size: 13px;
            transition: all 0.2s ease; box-shadow: 0 2px 8px rgba(66, 153, 225, 0.3);
        `;
        checkButton.classList.add('gob-ui-button-hover');
        checkButton.onclick = checkCurrentServer;

        buttonContainer.appendChild(startButton);
        buttonContainer.appendChild(stopButton);
        buttonContainer.appendChild(checkButton);
        contentArea.appendChild(buttonContainer);

        // Statistics
        const stats = document.createElement('div');
        stats.style.cssText = `
            display: flex; justify-content: space-between; align-items: center;
            padding: 12px; background: rgba(255, 255, 255, 0.05);
            border-radius: 10px; border: 1px solid rgba(255, 255, 255, 0.1);
        `;

        const statsLabel = document.createElement('span');
        statsLabel.textContent = '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:';
        statsLabel.style.cssText = `font-weight: 500; font-size: 13px; color: #E0E0E0;`;

        const statsValue = document.createElement('span');
        statsValue.id = 'gob-message-count';
        statsValue.textContent = '0';
        statsValue.style.cssText = `
            font-weight: 600; font-size: 11px; color: #4CAF50;
            background: rgba(76, 175, 80, 0.2); padding: 4px 8px;
            border-radius: 6px; border: 1px solid rgba(76, 175, 80, 0.3);
            text-shadow: 0 0 8px rgba(76, 175, 80, 0.5);
            min-width: 32px; text-align: center;
        `;

        stats.appendChild(statsLabel);
        stats.appendChild(statsValue);
        contentArea.appendChild(stats);

        container.appendChild(contentArea);

        // Minimize/maximize button
        const toggleButton = document.createElement('button');
        toggleButton.innerHTML = '‚àí';
        toggleButton.style.cssText = `
            position: absolute; top: 12px; right: 12px; width: 28px; height: 28px;
            background: rgba(255, 255, 255, 0.1); border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 50%; color: #ffffff; font-size: 16px; font-weight: bold;
            cursor: pointer; display: flex; align-items: center; justify-content: center;
            transition: all 0.2s ease; backdrop-filter: blur(10px);
        `;

        toggleButton.addEventListener('click', () => {
            minimized = !minimized;
            const contentArea = document.getElementById('gob-content-area');

            if (contentArea) {
                if (minimized) {
                    contentArea.style.display = 'none';
                    container.style.width = '200px';
                    toggleButton.innerHTML = '+';
                } else {
                    contentArea.style.display = 'block';
                    container.style.width = '240px';
                    toggleButton.innerHTML = '‚àí';
                }
            }
        });

        container.appendChild(toggleButton);
        document.body.appendChild(container);
        uiCreated = true;

        console.log('üé® Enhanced GoB Monitor UI created with User ID:', USER_ID);
    }

    function updateStatus(message = null) {
        const statusEl = document.getElementById('gob-status-value');
        if (!statusEl) return;

        if (message) {
            statusEl.textContent = message;
            statusEl.style.color = '#FFD700';
        } else {
            const cyclingStatus = serverCycleInterval ? 'üîÑ –¶–∏–∫–ª–∏—Ä—É–µ—Ç—Å—è' : '‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
            const serverInfo = currentServer ? `–Ω–∞ ${currentServer}` : '';

            statusEl.textContent = `${cyclingStatus} ${serverInfo}`;
            statusEl.style.color = serverCycleInterval ? '#4CAF50' : '#FF5252';
        }

        // Update message counter
        const counterEl = document.getElementById('gob-message-count');
        if (counterEl) counterEl.textContent = totalMessagesSent;
    }

    function updateTargetServers() {
        const checkboxes = document.querySelectorAll('#gob-monitor-ui input[type="checkbox"]');
        targetServerNames = Array.from(checkboxes).filter(cb => cb.checked).map(cb => cb.value);
        updateStatus();
    }

    function toggleServerCycle() {
        if (serverCycleInterval) {
            stopServerCycle();
        } else {
            startServerCycle();
        }
    }

    function stopServerCycle() {
        if (serverCycleInterval) {
            clearInterval(serverCycleInterval);
            serverCycleInterval = null;
        }
        updateStatus();

        const startBtn = document.getElementById('gob-start-btn');
        if (startBtn) {
            startBtn.innerHTML = `
                <div style="display: flex; align-items: center; justify-content: center; gap: 6px;">
                    <span>‚ñ∂Ô∏è</span><span>–ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</span>
                </div>
            `;
        }
    }

    async function checkCurrentServer() {
        const server = getCurrentServer();
        updateStatus(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ${server}...`);

        try {
            await checkAndSendServerMessages(server);
            updateStatus();
        } catch (error) {
            updateStatus('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å');
        }
    }

    function getCurrentServer() {
        const selectedServer = document.querySelector('#server-select .server-list li.selected h2');
        if (selectedServer) return selectedServer.textContent.trim().toUpperCase();

        const serverButton = document.querySelector('.butt_left_menu.ng-binding .colorRed');
        if (serverButton) return serverButton.textContent.trim().toUpperCase();

        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    }

    function getAvailableServers() {
        const serverElements = document.querySelectorAll('#server-select .server-list li:not(.down)');
        return Array.from(serverElements).map(el => {
            const nameEl = el.querySelector('h2');
            return nameEl ? nameEl.textContent.trim() : null;
        }).filter(name => name !== null && name !== 'DEV');
    }

    function getNextTargetServer() {
        const availableServers = getAvailableServers();
        const currentServer = getCurrentServer();

        let attempts = 0;
        while (attempts < targetServerNames.length) {
            const targetServer = targetServerNames[currentTargetIndex];
            currentTargetIndex = (currentTargetIndex + 1) % targetServerNames.length;

            if (availableServers.includes(targetServer) && targetServer !== currentServer) {
                return targetServer;
            }
            attempts++;
        }

        const otherServers = availableServers.filter(server => server !== currentServer);
        return otherServers.length > 0 ? otherServers[0] : null;
    }

    function switchToServer(serverName) {
        const serverElements = document.querySelectorAll('#server-select .server-list li:not(.down)');
        for (const serverEl of serverElements) {
            const serverNameEl = serverEl.querySelector('h2');
            if (serverNameEl && serverNameEl.textContent.trim() === serverName) {
                if (serverEl.classList.contains('selected')) return true;
                serverEl.click();
                return true;
            }
        }
        return false;
    }

    // Enhanced server cycling with timing from first script
    function startServerCycle() {
        if (serverCycleInterval) clearInterval(serverCycleInterval);

        const availableServers = getAvailableServers();
        if (availableServers.length === 0 || targetServerNames.length === 0) return;

        const startBtn = document.getElementById('gob-start-btn');
        if (startBtn) {
            startBtn.innerHTML = `
                <div style="display: flex; align-items: center; justify-content: center; gap: 6px;">
                    <span>‚è∏Ô∏è</span><span>–ü–∞—É–∑–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</span>
                </div>
            `;
        }

        let isProcessing = false;

        // Use faster interval from first script (500ms vs 12000ms)
        serverCycleInterval = setInterval(async () => {
            if (isProcessing) return;

            const targetServer = getNextTargetServer();

            if (targetServer && switchToServer(targetServer)) {
                isProcessing = true;

                // Use shorter delays from first script (1500ms vs 2000-3000ms)
                setTimeout(async () => {
                    const newServer = getCurrentServer();
                    if (newServer !== currentServer) {
                        currentServer = newServer;
                        updateStatus();

                        setTimeout(async () => {
                            try {
                                await checkAndSendServerMessages(currentServer);
                            } catch (error) {
                                console.error('‚ùå Error processing messages:', error);
                            } finally {
                                isProcessing = false;
                            }
                        }, 1500);
                    } else {
                        isProcessing = false;
                    }
                }, 1500);
            }
        }, 500);
    }

    function startMonitoring() {
        const chatContainer = document.getElementById('listChat');
        if (!chatContainer) {
            setTimeout(startMonitoring, 2000);
            return;
        }

        currentServer = getCurrentServer();

        if (!sentMessages[currentServer]) {
            sentMessages[currentServer] = new Set();
        }

        isMonitoring = true;

        setTimeout(async () => {
            await checkAndSendServerMessages(currentServer);
            updateStatus();
        }, 3000);
    }

    // Global duplicate prevention with user IDs
    function createGlobalMessageKey(serverName, messageText) {
        return `${serverName}|${messageText}`;
    }

    function isMessageAlreadySentGlobally(serverName, messageText) {
        const globalKey = createGlobalMessageKey(serverName, messageText);
        const now = new Date();
        const maxAge = 5 * 60 * 1000; // 5 minutes for global duplicate prevention

        if (window.globalMessageStore[globalKey]) {
            const lastSent = window.globalMessageStore[globalKey];
            if (now - lastSent.timestamp < maxAge) {
                // Check if it was sent by a different user instance
                if (lastSent.userId !== USER_ID) {
                    console.log(`üîÑ Message already sent by another instance (${lastSent.userId}):`, messageText);
                    return true;
                }
            }
        }
        return false;
    }

    function markMessageAsSentGlobally(serverName, messageText) {
        const globalKey = createGlobalMessageKey(serverName, messageText);
        window.globalMessageStore[globalKey] = {
            timestamp: new Date(),
            userId: USER_ID
        };
    }

    // Function to format message with appropriate colored dots
    function formatMessageWithColoredDots(messageText) {
        let formattedMessage = messageText;

        // Check for plutonium (green dot)
        if (/–ø–ª—É—Ç–æ–Ω–∏–π|plutonium/i.test(messageText)) {
            formattedMessage = 'üü¢ ' + formattedMessage;
        }
        // Check for spider (red dot)
        else if (/–ø–∞—É–∫|spider/i.test(messageText)) {
            formattedMessage = 'üî¥ ' + formattedMessage;
        }
        // Check for hamster (blue dot)
        else if (/—Ö–æ–º—è–∫|hamster/i.test(messageText)) {
            formattedMessage = 'üîµ ' + formattedMessage;
        }

        return formattedMessage;
    }

    // Enhanced message processing with date-based filtering and global duplicate prevention
    async function checkAndSendServerMessages(serverName) {
        const messages = document.querySelectorAll('#listChat li');
        const serverMessages = [];

        const now = new Date();
        const maxAge = 2 * 60 * 1000; // 2 minutes max age
        const today = now.toDateString(); // Current date for comparison

        const store = window.lastSentMessagesStore;

        if (!store[serverName]) {
            store[serverName] = {};
        }

        messages.forEach(message => {
            const messageText = message.textContent || message.innerText;

            // Use more specific filtering
            if (!/SERVER:|Mac_:|_Marihuana_:/i.test(messageText)) return;

            // ENHANCED: Filter out messages containing "ignored" (case-insensitive)
            if (/ignored/i.test(messageText)) {
                console.log('‚ö†Ô∏è Skipping ignored message:', messageText.substring(0, 50));
                return;
            }

            // Enhanced time-based filtering with date check
            const timeEl = message.querySelector('.time');
            if (timeEl) {
                const timeText = timeEl.textContent.trim();
                const [hh, mm] = timeText.split(':').map(Number);
                if (!isNaN(hh) && !isNaN(mm)) {
                    const msgTime = new Date(now);
                    msgTime.setHours(hh, mm, 0, 0);

                    // Check if message is from today
                    if (msgTime.toDateString() !== today) {
                        console.log(`‚è∞ Skipping old message from different date:`, messageText.substring(0, 50));
                        return;
                    }

                    const age = now - msgTime;
                    if (age > maxAge || age < 0) return;
                }
            }

            let cleanedMessage = messageText.replace(/\s+/g, ' ').trim();

            // Apply colored dot formatting
            cleanedMessage = formatMessageWithColoredDots(cleanedMessage);

            if (/—Å–æ–æ–±—â\. –ø—Ä–æ–∏–≥–Ω–æ—Ä/i.test(cleanedMessage)) return;

            // Check global duplicate prevention
            if (isMessageAlreadySentGlobally(serverName, cleanedMessage)) {
                return; // Skip if already sent by another instance
            }

            // Enhanced time-based duplicate prevention with date
            const messageKey = `${cleanedMessage}|${today}`;
            const lastTime = store[serverName][messageKey];
            if (lastTime && now - lastTime < maxAge) return;

            store[serverName][messageKey] = now;
            markMessageAsSentGlobally(serverName, cleanedMessage);
            serverMessages.push(cleanedMessage);
        });

        if (serverMessages.length > 0) {
            const combinedMessage = `üéÆ ${serverName} [${USER_ID.substring(0, 6)}]\n${serverMessages.join('\n')}`;
            const success = await sendToTelegram(combinedMessage);

            if (success) {
                totalMessagesSent += serverMessages.length;
                updateStatus(); // Update the counter in UI
            }
        }
    }

    async function sendToTelegram(message) {
        try {
            const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    chat_id: CHAT_ID,
                    text: message,
                    parse_mode: 'HTML'
                })
            });

            if (response.ok) {
                console.log('‚úÖ Message sent to Telegram');
                return true;
            } else {
                console.error('‚ùå Failed to send message');
                return false;
            }
        } catch (error) {
            console.error('‚ùå Error sending to Telegram:', error);
            return false;
        }
    }

    function init() {
        console.log('üéÆ Enhanced GoB Monitor loaded with fixes');

        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                setTimeout(() => {
                    createUI();
                    startMonitoring();
                }, 3000);
            });
        } else {
            setTimeout(() => {
                createUI();
                startMonitoring();
            }, 3000);
        }
    }

    init();
})();
